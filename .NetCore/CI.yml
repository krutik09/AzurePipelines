trigger:
  branches:
    include:
      - main
parameters:
  - name: targetEnvironments                               # To seperate concerns of different env
    displayName: Deploy into which environment.
    type: string
    default: Test
    values:
      - Development
      - Test
pool:
  vmImage: ubuntu-latest

variables:
- ${{ if eq(parameters.targetEnvironments,'Development') }}:
  - group: ''                                                # Name of variable group for dev env
- ${{ if eq(parameters.targetEnvironments,'Test') }}:
  - group: ''                                                # Name of variable group for test env
- name: 'solutionPath'
  value: ''                                    # path should be :-  $(Build.SourcesDirectory)/path/to/.sln
- name: 'dockerfilePath'
  value: '$(solutionPath)/SBOM Api/Dockerfile' # path should be :- $(solutionPath)/path/to/dockerfile
- name: LatestImageTag
  value: $(Build.SourceBranchName)-latest     # Add tags if necessary

jobs:                                        
 - job: BuildAndPushImage                      # Job to build and push image to repository
   displayName: Build and Push docker Image
   steps:
   - task: Docker@2
     displayName: Build Docker image
     inputs:
      containerRegistry: '$(serviceConnection)'  # use seperate groups for both env to eliminate need of groups
      repository: ''                             # specify repository name
      command: 'build'
      Dockerfile: $(dockerfilePath)
      tags: |
        $(LatestImageTag)
        $(Build.SourceBranchName)-$(Build.BuildId)
      arguments: '--build-arg ARGName=$(ArgVariable)' # pass build args if necessary 

   - task: DotNetCoreCLI@2                           # Task to run the unit tests
     displayName: Test
     inputs:
      command: test
      projects: ''                                   # path should be:- $(solutionPath)/path/to/testproj
      arguments: '--configuration $(BuildConfiguration) --collect:"XPlat Code Coverage" '
  
   - script: 'dotnet tool install -g dotnet-reportgenerator-globaltool  '
     displayName: 'Command Line Script'

   - script: 'reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(solutionPath) -reporttypes:"Cobertura"'
     displayName: 'Command Line Script'

   - task: PublishCodeCoverageResults@2
     displayName: 'Publish code coverage from $(solutionPath)/Cobertura.xml'
     inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

   - task: Docker@2
     displayName: Push Docker image to container registry
     inputs:
      containerRegistry: '$(serviceConnection)'        # use seperate groups for both env to eliminate need of groups
      repository: ''                                   # specify repository name
      command: 'push'
      tags: |
        $(LatestImageTag)
        $(Build.SourceBranchName)-$(Build.BuildId)

  
